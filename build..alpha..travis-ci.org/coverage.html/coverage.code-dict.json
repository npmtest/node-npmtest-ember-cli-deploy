{"/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/test.js":"/* istanbul instrument in package npmtest_ember_cli_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/lib.npmtest_ember_cli_deploy.js":"/* istanbul instrument in package npmtest_ember_cli_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_deploy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_deploy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-deploy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_deploy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_deploy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_deploy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_deploy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_deploy.__dirname + '/lib.npmtest_ember_cli_deploy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/index.js":"var path                = require('path');\nvar commands            = require('./lib/commands');\n\nmodule.exports = {\n  name: 'ember-cli-deploy',\n\n  includedCommands: function() {\n    return commands;\n  },\n\n  blueprintsPath: function() {\n    return path.join(__dirname, 'blueprints');\n  },\n\n  postBuild: function(result) {\n    var _this = this;\n    if (!this.app) {\n      // You will need ember-cli >= 1.13 to use ember-cli-deploy's postBuild integration.\n      // This is because prior to 1.13, `this.app` is not available in the postBuild hook.\n      return;\n    }\n    var options = this.app.options.emberCLIDeploy || {};\n\n    var deployTarget = options.runOnPostBuild;\n    if (deployTarget) {\n      var ReadConfigTask = require('./lib/tasks/read-config');\n      var readConfig = new ReadConfigTask({\n        project: this.project,\n        deployTarget: deployTarget,\n        deployConfigFile: options.configFile\n      });\n      return readConfig.run().then(function(config){\n        var DeployTask = require('./lib/tasks/deploy');\n        var deploy = new DeployTask({\n          project: _this.project,\n          ui: _this.ui,\n          deployTarget: deployTarget,\n          config: config,\n          shouldActivate: options.shouldActivate,\n          commandOptions: {\n            buildDir: result.directory\n          }\n        });\n        return deploy.run();\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/commands/index.js":"module.exports = {\n  'deploy': require('./deploy'),\n  'deploy:activate': require('./activate'),\n  'deploy:list': require('./list'),\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/commands/deploy.js":"var chooseOptionValue = require('../helpers/option-value');\n\nmodule.exports = {\n  name: 'deploy',\n  description: 'Deploys an ember-cli app',\n  works: 'insideProject',\n\n  anonymousOptions: [\n    '<deployTarget>'\n  ],\n\n  // note: we can not use `default` from ember-cli because we need to use\n  // settings from .ember-cli config-file as secondary defaults\n  availableOptions: [\n    { name: 'deploy-config-file', type: String, description: '(Default: config/deploy.js)' },\n    { name: 'verbose', type: Boolean, description: '(Default: false)' },\n    { name: 'activate', type: Boolean, description: '(Default: false)' },\n    { name: 'show-progress', type: Boolean, aliases: ['p', 'progress'], description: '(Default: true)'},\n    { name: 'log-info-color', type: String, description: '(Default: \"blue\")'},\n    { name: 'log-error-color', type: String, description: '(Default: \"red\")'}\n  ],\n\n  run: function(commandOptions, rawArgs) {\n    commandOptions.deployTarget = rawArgs.shift();\n\n    commandOptions.deployConfigFile = chooseOptionValue(commandOptions.deployConfigFile, this.settings, 'deploy-config-file', 'config/deploy.js');\n    commandOptions.activate = chooseOptionValue(commandOptions.activate, this.settings, 'activate');\n\n    this.ui.verbose = chooseOptionValue(commandOptions.verbose, this.settings, 'verbose');\n    this.ui.showProgress = chooseOptionValue(commandOptions.showProgress, this.settings, 'showProgress', process.stdout.isTTY ? true : false);\n    this.ui.logInfoColor = chooseOptionValue(commandOptions.logInfoColor, this.settings, 'logInfoColor', 'blue');\n    this.ui.logErrorColor = chooseOptionValue(commandOptions.logErrorColor, this.settings, 'logErrorColor', 'red');\n\n    process.env.DEPLOY_TARGET = commandOptions.deployTarget;\n\n    var ReadConfigTask = require('../tasks/read-config');\n    var readConfig = new ReadConfigTask({\n      project: this.project,\n      deployTarget: commandOptions.deployTarget,\n      deployConfigFile: commandOptions.deployConfigFile\n    });\n    var self = this;\n    return readConfig.run().then(function(config){\n      var DeployTask = require('../tasks/deploy');\n      var deploy = new DeployTask({\n        project: self.project,\n        ui: self.ui,\n        config: config,\n        deployTarget: commandOptions.deployTarget,\n        commandOptions: commandOptions\n      });\n\n      return deploy.run();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/helpers/option-value.js":"module.exports = function(commandOption, settings, optionKey, defaultValue) {\n  if (commandOption !== undefined) {\n    return commandOption;\n  }\n  if (settings && settings['ember-cli-deploy'] && settings['ember-cli-deploy'][optionKey] !== undefined) {\n    return settings['ember-cli-deploy'][optionKey];\n  }\n  return defaultValue;\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/commands/activate.js":"var chooseOptionValue = require('../helpers/option-value');\n\nmodule.exports = {\n  name: 'deploy:activate',\n  description: 'Activates a passed deploy-revision',\n  works: 'insideProject',\n\n  availableOptions: [\n    { name: 'revision', type: String, required: true },\n    { name: 'verbose', type: Boolean },\n    { name: 'deploy-config-file', type: String, description: '(Default: config/deploy.js)' },\n    { name: 'log-info-color', type: String, description: '(Default: \"blue\")'},\n    { name: 'log-error-color', type: String, description: '(Default: \"red\")'}\n  ],\n\n  anonymousOptions: [\n    '<deployTarget>'\n  ],\n\n  run: function(commandOptions, rawArgs) {\n    commandOptions.deployTarget = rawArgs.shift();\n\n    this.ui.verbose = chooseOptionValue(commandOptions.verbose, this.settings, 'verbose');\n    this.ui.logInfoColor = chooseOptionValue(commandOptions.logInfoColor, this.settings, 'logInfoColor', 'blue');\n    this.ui.logErrorColor = chooseOptionValue(commandOptions.logErrorColor, this.settings, 'logErrorColor', 'red');\n    commandOptions.deployConfigFile = chooseOptionValue(commandOptions.deployConfigFile, this.settings, 'deploy-config-file', 'config/deploy.js');\n\n    process.env.DEPLOY_TARGET = commandOptions.deployTarget;\n\n    var ReadConfigTask = require('../tasks/read-config');\n    var readConfig = new ReadConfigTask({\n      project: this.project,\n      deployTarget: commandOptions.deployTarget,\n      deployConfigFile: commandOptions.deployConfigFile\n    });\n    var self = this;\n    return readConfig.run().then(function(config){\n      var PipelineTask = require('../tasks/pipeline');\n      var pipeline = new PipelineTask({\n        project: self.project,\n        ui: self.ui,\n        config: config,\n        deployTarget: commandOptions.deployTarget,\n        commandOptions: commandOptions,\n        hooks: [\n          'configure',\n          'setup',\n          'fetchInitialRevisions',\n          'willActivate',\n          'activate',\n          'fetchRevisions',\n          'didActivate',\n          'teardown'\n        ],\n        requiredHooks: [\n          'activate'\n        ]\n      });\n\n      return pipeline.run();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/commands/list.js":"var chooseOptionValue = require('../helpers/option-value');\n\nmodule.exports = {\n  name: 'deploy:list',\n  description: 'Lists the currently uploaded deploy-revisions',\n  works: 'insideProject',\n\n  anonymousOptions: [\n    '<deployTarget>'\n  ],\n\n  availableOptions: [\n    { name: 'deploy-config-file', type: String, description: '(Default: config/deploy.js)' },\n    { name: 'verbose', type: Boolean },\n    { name: 'amount', type: Number, description: '(Default: 10)' },\n    { name: 'log-info-color', type: String, description: '(Default: \"blue\")'},\n    { name: 'log-error-color', type: String, description: '(Default: \"red\")'}\n  ],\n\n  run: function(commandOptions, rawArgs) {\n    commandOptions.deployTarget = rawArgs.shift();\n\n    commandOptions.deployConfigFile = chooseOptionValue(commandOptions.deployConfigFile, this.settings, 'deploy-config-file', 'config/deploy.js');\n    this.ui.verbose = chooseOptionValue(commandOptions.verbose, this.settings, 'verbose');\n    this.ui.logInfoColor = chooseOptionValue(commandOptions.logInfoColor, this.settings, 'logInfoColor', 'blue');\n    this.ui.logErrorColor = chooseOptionValue(commandOptions.logErrorColor, this.settings, 'logErrorColor', 'red');\n    commandOptions.amount = chooseOptionValue(commandOptions.amount, this.settings, 'amount', 10);\n\n    process.env.DEPLOY_TARGET = commandOptions.deployTarget;\n\n    var ReadConfigTask = require('../tasks/read-config');\n    var readConfig = new ReadConfigTask({\n      project: this.project,\n      deployTarget: commandOptions.deployTarget,\n      deployConfigFile: commandOptions.deployConfigFile\n    });\n    var self = this;\n    return readConfig.run().then(function(config){\n      var PipelineTask = require('../tasks/pipeline');\n      var pipeline = new PipelineTask({\n        project: self.project,\n        ui: self.ui,\n        config: config,\n        deployTarget: commandOptions.deployTarget,\n        commandOptions: commandOptions,\n        hooks: [\n          'configure',\n          'setup',\n          'fetchRevisions',\n          'displayRevisions',\n          'teardown'\n        ],\n        requiredHooks: [\n          'fetchRevisions',\n          'displayRevisions'\n        ]\n      });\n\n      return pipeline.run();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment */) {\n  return {};\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/models/deprecated-plugin-registry.js":"var CoreObject     = require('core-object');\nvar SilentError    = require('silent-error');\nvar PluginRegistry = require('./plugin-registry');\n\nmodule.exports = CoreObject.extend({\n  init: function(project, ui, config) {\n    this._super();\n    this._registry = new PluginRegistry(project, ui, config);\n    this._config  = config;\n    this._project = project;\n\n    if (this._isUsingOldPluginControl()) {\n      if (this._isUsingNewPluginControl()) {\n        var message = 'Use of the old and new plugin controls simultaneously does not make sense.\\n' +\n          'Please use the new plugin controls\\n' +\n          'See the following page for information:\\n\\n' +\n          'http://ember-cli-deploy.com/docs/v1.0.x/configuration/\\n';\n        throw new SilentError(message);\n      } else {\n        ui.writeError('Use of the `config.plugins` property has been deprecated. Please use the new plugin run controls.');\n        ui.writeError('See the following page for information:\\n');\n        ui.writeError('http://ember-cli-deploy.com/docs/v1.0.x/configuration/');\n      }\n    }\n  },\n\n  pluginInstances: function() {\n    var addons  = this._project.addons || [];\n    var plugins = this._registry._plugins(addons);\n\n    return this._config.plugins.map(function(entry) {\n      var parts = entry.split(':');\n      var name = parts[0];\n      var alias = parts[1] || name;\n      var addon = plugins[name];\n\n      if (addon) {\n        return addon.createDeployPlugin({ name: alias });\n      }\n    }, [])\n    .filter(function(item) {\n      return !!item;\n    });\n  },\n\n  _isUsingOldPluginControl: function() {\n    return this._config.plugins;\n  },\n\n  _isUsingNewPluginControl: function() {\n    var aliasConfig    = Object.keys(this._registry._aliasConfig).length;\n    var disabledConfig = Object.keys(this._registry._disabledConfig).length;\n    var runOrderConfig = Object.keys(this._registry._runOrderConfig).length;\n\n    return aliasConfig || disabledConfig || runOrderConfig;\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/models/plugin-registry.js":"var CoreObject  = require('core-object');\nvar DAG         = require('dag-map').default;\nvar SilentError = require('silent-error');\nvar chalk       = require('chalk');\nvar _           = require('lodash');\n\n/**\n * Glossary\n *\n * - addon: An ember-cli addon\n * - plugin: An addon that contains the `ember-cli-deploy` keyword and implements the `createDeployPlugin` function\n * - pluginInstance: An instance of a plugin created by executing `createDeployPLugin`. A single plugin can have multiple aliased instances created\n **/\n\nmodule.exports = CoreObject.extend({\n  init: function(project, ui, config) {\n    this._super();\n    this._project        = project;\n    this._ui             = ui;\n    this._aliasConfig    = (config.pipeline && config.pipeline.alias) || {};\n    this._runOrderConfig = (config.pipeline && config.pipeline.runOrder) || {};\n    this._disabledConfig = (config.pipeline && config.pipeline.disabled) || {};\n  },\n\n  pluginInstances: function() {\n    var addons                 = this._project.addons || [];\n    var plugins                = this._plugins(addons);\n    var aliasMap               = this._buildAliasMap(plugins, this._aliasConfig);\n    var disabledMap            = this._buildDisabledMap(aliasMap, this._disabledConfig);\n    var pluginInstances        = this._pluginInstances(plugins, aliasMap);\n    var runOrderMap            = this._buildRunOrderMap(this._runOrderConfig, aliasMap, pluginInstances);\n    var enabledPluginInstances = this._applyDisabledConfig(pluginInstances, disabledMap);\n    var orderedPluginInstances = this._applyRunOrderConfig(enabledPluginInstances, runOrderMap);\n\n    if (orderedPluginInstances.length === 0) {\n      this._ui.writeError('\\nWARNING: No plugins installed/enabled\\n');\n      this._ui.writeError('ember-cli-deploy works by registering plugins in it\\'s pipeline.\\n');\n      this._ui.writeError('In order to execute a deployment you must install at least one ember-cli-deploy compatible plugin.\\n');\n      this._ui.writeError('Visit http://ember-cli-deploy.com/plugins/ for a list of supported plugins.\\n');\n    }\n\n    return orderedPluginInstances;\n  },\n\n  _plugins: function(addons) {\n    if (!this._cachedValidAddons) {\n      this._cachedValidAddons = this._discoverPlugins(addons);\n    }\n\n    return this._cachedValidAddons;\n  },\n\n  _discoverPlugins: function(addons){\n    var self = this;\n    return addons.reduce(function(plugins, addon) {\n      if (self._isValidPlugin(addon)) {\n        var pluginName = self._pluginName(addon);\n        plugins[pluginName] = addon;\n      }\n\n      if (self._isDeployPluginPack(addon)) {\n        var nestedAddons = self._discoverPlugins(addon.addons);\n        plugins = Object.keys(nestedAddons).reduce(function(v, key) {\n          v[key] = nestedAddons[key];\n          return v;\n        }, plugins);\n      }\n\n      return plugins;\n    }, {});\n  },\n\n  /**\n   * Build up a hash of the all plugin aliases, keyed by plugin name, with the value being an array of aliases.\n   * This hash will contain an entry for every installed plugin.\n   *\n   * If a plugin has not been referenced in `config.pipeline.alias` then it will be added to the map\n   * with an alias to it's original name (see `boo` below),\n   *\n   * Example return value:\n   *\n   * {\n   *   foo: { as: ['bar', 'baz'] },\n   *   boo: { as: ['boo'] }\n   * }\n   * */\n  _buildAliasMap: function(plugins, config) {\n    var self = this;\n    var aliasMap = Object.keys(plugins)\n      .reduce(function(aliases, pluginName) {\n        if (!aliases[pluginName] || !aliases[pluginName].as) {\n          aliases[pluginName] = { as: [pluginName] };\n        }\n\n        aliases[pluginName].as = self._castArray(aliases[pluginName].as);\n        return aliases;\n      }, config);\n\n    var unknownConfigKeys = _.difference(Object.keys(aliasMap), Object.keys(plugins));\n\n    if (unknownConfigKeys.length) {\n      this._logUnknownPlugins(unknownConfigKeys, 'config.pipeline.alias');\n    }\n\n    return aliasMap;\n  },\n\n  /**\n   * Build up a hash of disabled plugin instances, keyed by alias, with the value being whether it's disabled or not\n   * This hash will contain an entry for every installed plugin.\n   *\n   * If a plugin has not been referenced in `config.pipeline.disabled` then it will be added to the map as `disabled: false`.\n   *\n   * Example return value:\n   *\n   * {\n   *   foo: true,\n   *   bar: false\n   * }\n   **/\n  _buildDisabledMap: function(aliasMap, config) {\n    var aliases = this._flattenAliasMap(aliasMap);\n    var allExcept = null;\n\n    if (typeof config.allExcept !== 'undefined') {\n      allExcept = this._castArray(config.allExcept);\n      delete config.allExcept;\n    }\n\n    var keys = Object.keys(config);\n\n    if (allExcept) {\n      keys = keys.concat(allExcept);\n    }\n\n    var unknownConfigKeys = _.difference(keys, aliases);\n\n    if (unknownConfigKeys.length) {\n      this._logUnknownPlugins(unknownConfigKeys, 'config.pipeline.disabled');\n    }\n\n    var disabledMap = aliases.reduce(function(map, alias) {\n      if (map[alias] === undefined) {\n        if (allExcept && allExcept.length) {\n          if (allExcept.indexOf(alias) >= 0) {\n            map[alias] = false;\n          } else {\n            map[alias] = true;\n          }\n        } else {\n          map[alias] = false;\n        }\n      }\n\n      return map;\n    }, config);\n\n    return disabledMap;\n  },\n\n  /**\n   * Build up a hash of plugin instance execution order overrides.\n   * This hash will only container an entry for instances that should run in a particular order. All other instances will be ordered by their natural\n   * ordering.\n   *\n   * Ordering of plugin instances can be specified by users of ember-cli-deploy via `config.pipeline.runOrder` and by plugin authors via `run{Before,After}`.\n   * This function will attempt to merge the author defined run orders with the user defined ones.\n   *\n   * Example return value:\n   *\n   * {\n   *   foo: { before: ['bar'] },\n   *   baz: { after: ['boo', 'bom'] }\n   * }\n   *\n   *\n   **/\n  _buildRunOrderMap: function(config, aliasMap, pluginInstances) {\n    var self = this;\n\n    pluginInstances.forEach(function(instance) {\n      if (instance.runBefore) {\n        var befores = self._castArray(instance.runBefore);\n        config = self._mergeAuthorProvidedOrderWithConfigOrder('before', instance.name, befores, config, aliasMap);\n      }\n\n      if (instance.runAfter) {\n        var afters = self._castArray(instance.runAfter);\n        config = self._mergeAuthorProvidedOrderWithConfigOrder('after', instance.name, afters, config, aliasMap);\n      }\n    });\n\n    var aliases = this._flattenAliasMap(aliasMap);\n\n    var configNames = Object.keys(config).reduce(function(arr, key) {\n      arr.push(key);\n\n      var befores = self._castArray(config[key].before);\n      var afters = self._castArray(config[key].after);\n\n      return arr.concat(befores).concat(afters);\n    }, [])\n    .reduce(function(arr, key) {\n      if (arr.indexOf(key) === -1) {\n        arr.push(key);\n      }\n      return arr;\n    }, []);\n\n    var unknownConfigKeys = _.difference(configNames, aliases);\n\n    if (unknownConfigKeys.length) {\n      this._logUnknownPlugins(unknownConfigKeys, 'config.pipeline.runOrder');\n    }\n\n    return config;\n  },\n\n  _pluginInstances: function(plugins, aliasMap) {\n    return Object.keys(plugins)\n      .map(function(pluginName) {\n        var addon   = plugins[pluginName];\n        var aliases = aliasMap[pluginName].as;\n\n        return aliases.map(function(alias) {\n          var v = addon.createDeployPlugin({ name: alias });\n          return v;\n        });\n      })\n      .reduce(function(instances, arr) {\n        return instances.concat(arr);\n      }, []);\n  },\n\n  _applyDisabledConfig: function(pluginInstances, disabledMap) {\n    return pluginInstances.filter(function(instance) {\n      return !disabledMap[instance.name];\n    }) ;\n  },\n\n  _applyRunOrderConfig: function(pluginInstances, runOrderMap) {\n    var self            = this;\n    var graph           = new DAG();\n    var sortedInstances = [];\n\n    try {\n      pluginInstances.forEach(function(instance) {\n        var before = (runOrderMap[instance.name] && self._castArray(runOrderMap[instance.name].before)) || [];\n        var after = (runOrderMap[instance.name] && self._castArray(runOrderMap[instance.name].after)) || [];\n        graph.add(instance.name, instance, before, after);\n      });\n\n      graph.topsort(function (key, value) {\n        sortedInstances.push(value);\n      });\n    } catch(err) {\n      if (/cycle detected/.test(err)) {\n        throw new SilentError('your ember-cli-deploy plugins have a circular dependency:' + err.message);\n      } else {\n        throw err;\n      }\n    }\n\n    return sortedInstances;\n  },\n\n  _isDeployPluginPack: function(addon) {\n    return this._addonHasKeyword(addon, 'ember-cli-deploy-plugin-pack');\n  },\n\n  _isValidPlugin: function(addon) {\n    return this._addonHasKeyword(addon, 'ember-cli-deploy-plugin') && this._addonImplementsDeploymentHooks(addon);\n  },\n\n  _pluginName: function(addon) {\n    var pluginNameRegex = /^(ember\\-cli\\-deploy\\-)(.*)$/;\n    return addon.name.match(pluginNameRegex)[2];\n  },\n\n  _addonHasKeyword: function(addon, keyword) {\n    var keywords = addon.pkg.keywords;\n    return keywords.indexOf(keyword) > -1;\n  },\n\n  _addonImplementsDeploymentHooks: function(addon) {\n    return addon.createDeployPlugin && typeof addon.createDeployPlugin === 'function';\n  },\n\n  _castArray: function(obj) {\n    if (!obj) {\n      return [];\n    }\n\n    return _.castArray(obj);\n  },\n\n  _mergeAuthorProvidedOrderWithConfigOrder: function(type, instanceName, names, config, aliasMap) {\n    var self = this;\n    names.forEach(function(name) {\n      var aliases = aliasMap[name] && aliasMap[name].as;\n      if (aliases) {\n        if (!config[instanceName]) {\n          config[instanceName] = {};\n        }\n\n        if (!config[instanceName][type]) {\n          config[instanceName][type] = aliases;\n        } else {\n          var combined = self._castArray(config[instanceName][type])\n            .reduce(function(all, current) {\n              if (all.indexOf(current) === -1) {\n                all.push(current);\n              }\n\n              return all;\n            }, aliases);\n          config[instanceName][type] = combined;\n        }\n      }\n    });\n\n    return config;\n  },\n\n  _logUnknownPlugins: function(names, key) {\n    var message = chalk.yellow('Your config has referenced the following unknown plugins or aliases in `' + key + '`:\\n');\n    this._ui.writeLine(message, 'WARNING');\n    names.forEach(function(name) {\n      message = chalk.yellow('- ' + name + '\\n');\n      this._ui.writeLine(message, 'WARNING');\n    }.bind(this));\n  },\n\n  _flattenAliasMap: function(aliasMap) {\n    return Object.keys(aliasMap)\n      .reduce(function(aliases, pluginName) {\n        return aliases.concat(aliasMap[pluginName].as);\n      }, []);\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/models/pipeline.js":"'use strict';\n\nvar RSVP  = require('rsvp');\nvar _     = require('lodash');\nvar chalk = require('chalk');\n\n/* This is a generic implementation of a pipeline with ordered, promise-aware hooks,\n * pleasant logging, and failure handling. It should not have any \"deployment\" domain\n * logic or semantics, and is a candidate for extraction to its own npm module.\n */\nfunction Pipeline(hookNames, options) {\n  hookNames = hookNames || [];\n  options = options || {};\n  options = _.merge({\n    ui: {\n      logInfoColor: 'blue',\n      logErrorColor: 'red'\n    }\n  }, options);\n\n  this._ui = options.ui;\n\n  this._pipelineHooks = hookNames.reduce(function(pipelineHooks, hookName) {\n    pipelineHooks[hookName] = [];\n\n    return pipelineHooks;\n  }, { didFail: [] });\n\n  this.logInfo = chalk[this._ui.logInfoColor];\n  this.logError = chalk[this._ui.logErrorColor];\n  this._progressBarLib = options.progressBarLib || require('ember-cli-deploy-progress');\n}\n\nPipeline.prototype.register = function(hookName, fn) {\n  var ui            = this._ui;\n  var pipelineHooks = this._pipelineHooks;\n\n  if (typeof fn === 'function') {\n    fn = {\n      name: 'anonymous function',\n      fn: fn\n    };\n  }\n\n  if (pipelineHooks[hookName]) {\n    if (ui.verbose) {\n      ui.write(this.logInfo('Registering hook -> ' + hookName + '[' + fn.name + ']\\n'));\n    }\n\n    pipelineHooks[hookName].push(fn);\n  }\n};\n\nPipeline.prototype.hasHandlersForHook = function(hook) {\n  return this._pipelineHooks[hook].length !== 0;\n};\n\nPipeline.prototype.execute = function(context) {\n  context = context || { };\n\n  var ui = this._ui;\n  var hooks = this._hooksWithoutDidFail(this.hookNames());\n  var ProgressBar = this._progressBarLib;\n  if (ui.verbose) {\n    ui.write(this.logInfo('Executing pipeline\\n'));\n  } else if (ui.showProgress) {\n    ui.progressBar = new ProgressBar('Deploying [:bar] :percent [plugin: :plugin -> :hook]', {\n      total: this._hooksCount(this._hooksWithoutConfigure(hooks)),\n      cursor: process.platform === 'darwin' ? '🚀 ' : '>'\n    });\n  }\n\n  return hooks.reduce(this._addHookExecutionPromiseToPipelinePromiseChain.bind(this, ui), RSVP.resolve(context))\n  .then(this._notifyPipelineCompletion.bind(this, ui))\n  .catch(this._handlePipelineFailure.bind(this, ui, context))\n  .catch(this._abortPipelineExecution.bind(this, ui));\n};\n\nPipeline.prototype.hookNames = function() {\n  return Object.keys(this._pipelineHooks);\n};\n\nPipeline.prototype._addHookExecutionPromiseToPipelinePromiseChain = function(ui, promise, hookName) {\n  var self = this;\n  return promise.then(this._notifyPipelineHookExecution.bind(this, ui, hookName))\n  .then(function(context){\n    try {\n      return self._executeHook(hookName, context);\n    } catch(error) {\n      return RSVP.reject(error);\n    }\n  });\n};\n\nPipeline.prototype._hooksWithoutDidFail = function(hooks) {\n  return hooks.filter(function(hook) {\n    return hook !== 'didFail';\n  });\n};\n\nPipeline.prototype._hooksWithoutConfigure = function(hooks) {\n  return hooks.filter(function(hook) {\n    return hook !== 'configure';\n  });\n};\n\nPipeline.prototype._hooksCount = function(hooks) {\n  return hooks.reduce(function(sum, hookName) {\n    var hookFunctions = this._pipelineHooks[hookName];\n    return sum + hookFunctions.length;\n  }.bind(this), 0);\n};\n\nPipeline.prototype._handlePipelineFailure = function(ui, context, error) {\n  if (ui.verbose) {\n    ui.write(this.logError('|\\n'));\n    ui.write(this.logError('+- didFail\\n'));\n  }\n  ui.write(this.logError(error + '\\n' + (error ? error.stack : null)));\n  return this._executeHook('didFail', context)\n    .then(RSVP.reject.bind(this, error));\n};\n\nPipeline.prototype._abortPipelineExecution = function(ui/*, error */) {\n  if (ui.verbose) {\n    ui.write(this.logInfo('|\\n'));\n  }\n  ui.write(this.logError('Pipeline aborted\\n'));\n  return RSVP.reject();\n};\n\nPipeline.prototype._notifyPipelineCompletion = function(ui) {\n  if (ui.verbose) {\n    ui.write(this.logInfo('|\\n'));\n    ui.write(this.logInfo('Pipeline complete\\n'));\n  }\n};\n\nPipeline.prototype._notifyPipelineHookExecution = function(ui, hookName, context) {\n  if (ui.verbose) {\n    ui.write(this.logInfo('|\\n'));\n    ui.write(this.logInfo('+- ' + hookName + '\\n'));\n  }\n  return context;\n};\n\nPipeline.prototype._executeHook = function(hookName, context) {\n  var ui            = this._ui;\n  var hookFunctions = this._pipelineHooks[hookName];\n\n  return hookFunctions.reduce(this._addPluginHookExecutionPromiseToHookPromiseChain.bind(this, ui, context, hookName), RSVP.resolve(context));\n};\n\nPipeline.prototype._addPluginHookExecutionPromiseToHookPromiseChain = function(ui, context, hookName, promise, fnObject) {\n  return promise\n    .then(this._notifyPipelinePluginHookExecution.bind(this, ui, fnObject, hookName))\n    .then(this._mergePluginHookResultIntoContext.bind(this, context));\n};\n\nPipeline.prototype._notifyPipelinePluginHookExecution = function(ui, fnObject, hookName, context) {\n  if (ui.verbose) {\n    ui.write(this.logInfo('|  |\\n'));\n    ui.write(this.logInfo('|  +- ' + fnObject.name + '\\n'));\n  } else if (ui.showProgress) {\n    if (hookName !== 'configure') {\n      ui.progressBar.tick({\n        hook: hookName,\n        plugin: fnObject.name\n      });\n    }\n  }\n\n  return fnObject.fn(context);\n};\n\nPipeline.prototype._mergePluginHookResultIntoContext = function(context,result) {\n  return _.mergeWith(context, result, function(a, b) {\n    if (_.isArray(a)) {\n      return a.concat(b);\n    }\n  });\n};\n\nmodule.exports = Pipeline;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/models/task.js":"'use strict';\n\nvar CoreObject = require('core-object');\n\nvar Task = CoreObject.extend({\n  run: function(/*options*/) {\n    throw new Error('Task needs to have run() defined.');\n  }\n});\n\nmodule.exports = Task;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-deploy/node_modules/ember-cli-deploy/lib/tasks/read-config.js":"var Task        = require('../models/task');\nvar RSVP        = require('rsvp');\nvar SilentError = require('silent-error');\n\nvar existsSync  = require('fs').existsSync;\nvar path        = require('path');\nvar dotenv      = require('dotenv');\n\nmodule.exports = Task.extend({\n  init: function() {\n    if (this._super.init) {\n      this._super.init.apply(this, arguments);\n    }\n\n    if (!this.project) {\n      throw new SilentError('No project passed to read-config task');\n    }\n\n    if(!this.deployTarget) {\n      throw new SilentError('No deployTarget passed to read-config task');\n    }\n\n    this.root = this.project.root;\n\n    this.deployConfigPath = this.deployConfigFile || 'config/deploy.js';\n    this.absoluteDeployConfigPath = path.resolve(this.root, this.deployConfigPath);\n\n    if (!existsSync(this.absoluteDeployConfigPath)) {\n      throw new SilentError('Deploy config does not exist at `' + this.deployConfigPath + '`');\n    }\n  },\n\n  run: function() {\n    this._loadDotEnv();\n    return this._readDeployConfig();\n  },\n\n  _loadDotEnv: function() {\n    var root         = this.root;\n\n    var deployDotEnvFilename = '.env.deploy.' + this.deployTarget;\n    var deployDotEnvFilePath = path.join(root, deployDotEnvFilename);\n\n    var dotEnvFilename = '.env';\n    var dotEnvFilePath = path.join(root, dotEnvFilename);\n\n    // order is important here. vars defined in files loaded first\n    // will override files loaded after.\n    var paths = [deployDotEnvFilePath, dotEnvFilePath];\n    paths.forEach(function(path) {\n      if (existsSync(path)) {\n        dotenv.load({\n          path: path\n        });\n      }\n    });\n  },\n\n  _readDeployConfig: function() {\n    var deployConfigFn  = require(this.absoluteDeployConfigPath);\n    return RSVP.resolve(deployConfigFn(this.deployTarget));\n  }\n});\n"}